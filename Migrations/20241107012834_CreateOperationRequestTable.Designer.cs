// <auto-generated />
using System;
using Hospital.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace sem5pi_24_25_g202.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20241107012834_CreateOperationRequestTable")]
    partial class CreateOperationRequestTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Hospital.Domain.Logs.AccountDeletionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AccountDeletionLogs", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.Logs.ProfileUpdateLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangedFields")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ProfileUpdateLogs", (string)null);
                });

            modelBuilder.Entity("Hospital.Domain.OperationRequest.OperationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DoctorID")
                        .HasColumnType("char(36)");

                    b.Property<string>("OperationTypeID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OperationRequest", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bec90ef3-cace-48b3-98ce-035d7cac6e95"),
                            DeadlineDate = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = new Guid("cf04c5c0-cf11-4aa7-ad6e-f187b6c195fc"),
                            OperationTypeID = "1",
                            PatientID = new Guid("cc0aab86-38bf-4878-b837-94cb4d826ad5"),
                            Priority = 1
                        },
                        new
                        {
                            Id = new Guid("849f95a0-47b8-40d3-b125-94af20f33991"),
                            DeadlineDate = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = new Guid("18cc1478-2d22-4015-8c76-583bedf92daf"),
                            OperationTypeID = "2",
                            PatientID = new Guid("687d019f-45f3-4868-bfc2-7e4a0e2d93ca"),
                            Priority = 2
                        },
                        new
                        {
                            Id = new Guid("61cad2b0-b0fa-483c-8405-94fd29b4165b"),
                            DeadlineDate = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorID = new Guid("6ecfba67-afc7-4f42-aa69-e3b581265768"),
                            OperationTypeID = "3",
                            PatientID = new Guid("72dbe0aa-47f4-4f0d-9982-8895bf670c7a"),
                            Priority = 3
                        });
                });

            modelBuilder.Entity("Hospital.Domain.Patients.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("AllergiesOrMedicalConditions")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("AppointmentHistory")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmergencyContact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedicalRecordNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Email", "PhoneNumber")
                        .IsUnique();

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd56ebb2-858b-4ecb-bb74-4040272f10e9"),
                            AllergiesOrMedicalConditions = "[\"Penicillin allergy\"]",
                            AppointmentHistory = "[\"Checkup on 2024-01-20\"]",
                            DateOfBirth = new DateTime(1985, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "1220741@isep.ipp.pt",
                            EmergencyContact = "0987654321",
                            FirstName = "Bernardo",
                            Gender = "Male",
                            LastName = "Giao",
                            MedicalRecordNumber = "MRN123456",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("7c2c2273-2f16-4788-bc43-f289bcecc55a"),
                            AllergiesOrMedicalConditions = "[\"Nut allergy\"]",
                            AppointmentHistory = "[\"Vaccination on 2023-05-15\"]",
                            DateOfBirth = new DateTime(1999, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ruimdvieir@gmail.com",
                            EmergencyContact = "0987654322",
                            FirstName = "Rui",
                            Gender = "Male",
                            LastName = "Vieira",
                            MedicalRecordNumber = "MRN987654",
                            PhoneNumber = "1234567891"
                        });
                });

            modelBuilder.Entity("Hospital.Domain.Users.SystemUser.SystemUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("DeleteToken")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IAMId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ResetToken")
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("VerifyToken")
                        .HasColumnType("longtext");

                    b.Property<bool>("isVerified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("SystemUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae7f6539-eeed-4837-90cc-f94bac7de311"),
                            Email = "ruimdv13@gmail.com",
                            IAMId = "1",
                            Password = "bf32388f0f958a12428ebc237a8d0863265e795ceb5c5f3d013b062f75bfad9e",
                            PhoneNumber = "912028969",
                            Role = 0,
                            Username = "adminUser",
                            isVerified = true
                        },
                        new
                        {
                            Id = new Guid("c6d257c8-a04e-4b88-a216-8d8f7a3ef7be"),
                            Email = "doctor@hospital.com",
                            IAMId = "2",
                            Password = "bf32388f0f958a12428ebc237a8d0863265e795ceb5c5f3d013b062f75bfad9e",
                            PhoneNumber = "1234567891",
                            Role = 1,
                            Username = "doctorUser",
                            isVerified = true
                        },
                        new
                        {
                            Id = new Guid("cb029ee8-8796-46a3-8aeb-0be008bb51ac"),
                            Email = "nurse@hospital.com",
                            IAMId = "3",
                            Password = "bf32388f0f958a12428ebc237a8d0863265e795ceb5c5f3d013b062f75bfad9e",
                            PhoneNumber = "1234567892",
                            Role = 2,
                            Username = "nurseUser",
                            isVerified = true
                        });
                });

            modelBuilder.Entity("Hospital.Domain.Users.SystemUser.SystemUser", b =>
                {
                    b.HasOne("Hospital.Domain.Patients.Patient", "Patient")
                        .WithOne("SystemUser")
                        .HasForeignKey("Hospital.Domain.Users.SystemUser.SystemUser", "PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hospital.Domain.Patients.Patient", b =>
                {
                    b.Navigation("SystemUser");
                });
#pragma warning restore 612, 618
        }
    }
}
