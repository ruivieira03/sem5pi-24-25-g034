
@startuml
actor Admin
participant API_Controller
participant Service_Layer
participant Repository
participant Password_Service
participant Email_Service
participant Unit_of_Work
database Database

Admin -> API_Controller: POST /api/SystemUser
API_Controller -> API_Controller: Validate Model
alt Invalid Model
    API_Controller -> Admin: 400 Bad Request
else Valid Model
    API_Controller -> Service_Layer: RegisterUserAsync
    Service_Layer -> Repository: GetUserByUsernameAsync
    Repository -> Database: Query Username
    alt Username Exists
        Service_Layer -> API_Controller: Exception: "Username already taken"
    else
        Service_Layer -> Repository: GetUserByEmailAsync
        Repository -> Database: Query Email
        alt Email Exists
            Service_Layer -> API_Controller: Exception: "Email already taken"
        else
            Service_Layer -> Password_Service: GenerateTemporaryPassword
            Password_Service -> Service_Layer: Hashed Password
            Service_Layer -> Repository: AddUserAsync
            Repository -> Database: Insert User
            Service_Layer -> Email_Service: SendRegistrationEmail
            Service_Layer -> Unit_of_Work: Commit
            Unit_of_Work -> Database: Save Transaction
            Service_Layer -> API_Controller: SystemUserDto
        end
    end
    API_Controller -> Admin: 201 Created with user details
end
@enduml
